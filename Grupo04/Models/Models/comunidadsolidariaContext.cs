// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Models.Models;

public partial class comunidadsolidariaContext : DbContext
{
    public comunidadsolidariaContext(DbContextOptions<comunidadsolidariaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Chat> Chat { get; set; }

    public virtual DbSet<DetalleDonacion> DetalleDonacion { get; set; }

    public virtual DbSet<DetalleDonacionTipo> DetalleDonacionTipo { get; set; }

    public virtual DbSet<Donacion> Donacion { get; set; }

    public virtual DbSet<DonacionTipo> DonacionTipo { get; set; }

    public virtual DbSet<Envio> Envio { get; set; }

    public virtual DbSet<EstadoTipo> EstadoTipo { get; set; }

    public virtual DbSet<Localidad> Localidad { get; set; }

    public virtual DbSet<Mensaje> Mensaje { get; set; }

    public virtual DbSet<Notificacion> Notificacion { get; set; }

    public virtual DbSet<Novedad> Novedad { get; set; }

    public virtual DbSet<Perfil> Perfil { get; set; }

    public virtual DbSet<Provincia> Provincia { get; set; }

    public virtual DbSet<Publicacion> Publicacion { get; set; }

    public virtual DbSet<PublicacionTipo> PublicacionTipo { get; set; }

    public virtual DbSet<Usuario> Usuario { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Chat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Chat_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.PerfilIdPerfil).HasColumnName("Perfil_idPerfil");
            entity.Property(e => e.PublicacionIdPublicacion).HasColumnName("Publicacion_idPublicacion");

            entity.HasOne(d => d.PerfilIdPerfilNavigation).WithMany(p => p.Chat)
                .HasForeignKey(d => d.PerfilIdPerfil)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Perfil_idPerfil");

            entity.HasOne(d => d.PublicacionIdPublicacionNavigation).WithMany(p => p.Chat)
                .HasForeignKey(d => d.PublicacionIdPublicacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Publicacion_idPublicacion");
        });

        modelBuilder.Entity<DetalleDonacion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("DetalleDonacion_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 99999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasColumnName("descripcion");
            entity.Property(e => e.DetalleDonacionTipoIdDetalleDonacinoTipo).HasColumnName("DetalleDonacionTipo_idDetalleDonacinoTipo");
            entity.Property(e => e.DonacionIdDonacion).HasColumnName("Donacion_idDonacion");
            entity.Property(e => e.EnvioIdEnvio).HasColumnName("Envio_idEnvio");

            entity.HasOne(d => d.DetalleDonacionTipoIdDetalleDonacinoTipoNavigation).WithMany(p => p.DetalleDonacion)
                .HasForeignKey(d => d.DetalleDonacionTipoIdDetalleDonacinoTipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DetalleDonacionTipo_idDetalleDonacionTipo");

            entity.HasOne(d => d.DonacionIdDonacionNavigation).WithMany(p => p.DetalleDonacion)
                .HasForeignKey(d => d.DonacionIdDonacion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Donacion_idDonacion");

            entity.HasOne(d => d.EnvioIdEnvioNavigation).WithMany(p => p.DetalleDonacion)
                .HasForeignKey(d => d.EnvioIdEnvio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Envio_idEnvio");
        });

        modelBuilder.Entity<DetalleDonacionTipo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("DetalleDonacionTipo_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Donacion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Donacion_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasColumnName("descripcion");
            entity.Property(e => e.DonacionTipoIdDonacionTipo).HasColumnName("DonacionTipo_idDonacionTipo");
            entity.Property(e => e.FechaHora).HasColumnName("fechaHora");
            entity.Property(e => e.PerfilIdPerfil).HasColumnName("Perfil_idPerfil");

            entity.HasOne(d => d.DonacionTipoIdDonacionTipoNavigation).WithMany(p => p.Donacion)
                .HasForeignKey(d => d.DonacionTipoIdDonacionTipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DonacionTipo_idDonacionTipo");

            entity.HasOne(d => d.PerfilIdPerfilNavigation).WithMany(p => p.Donacion)
                .HasForeignKey(d => d.PerfilIdPerfil)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Perfil_idPerfil");
        });

        modelBuilder.Entity<DonacionTipo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("TipoDonacion_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Envio>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Envio_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 99999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Direccion)
                .IsRequired()
                .HasColumnName("direccion");
            entity.Property(e => e.EstadoIdEstado).HasColumnName("Estado_idEstado");
            entity.Property(e => e.FechaEnvio).HasColumnName("fechaEnvio");
            entity.Property(e => e.LocalidadIdLocalidad).HasColumnName("Localidad_idLocalidad");

            entity.HasOne(d => d.EstadoIdEstadoNavigation).WithMany(p => p.Envio)
                .HasForeignKey(d => d.EstadoIdEstado)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("EstadoTipo_idEstadoTipo");

            entity.HasOne(d => d.LocalidadIdLocalidadNavigation).WithMany(p => p.Envio)
                .HasForeignKey(d => d.LocalidadIdLocalidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Localidad_idLocalidad");
        });

        modelBuilder.Entity<EstadoTipo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("EstadoTipo_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 99999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Localidad>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Localidad_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.CodigoPostal)
                .IsRequired()
                .HasColumnName("codigoPostal");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");
            entity.Property(e => e.ProvinciaIdProvincia).HasColumnName("Provincia_idProvincia");

            entity.HasOne(d => d.ProvinciaIdProvinciaNavigation).WithMany(p => p.Localidad)
                .HasForeignKey(d => d.ProvinciaIdProvincia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Provincia_idProvincia");
        });

        modelBuilder.Entity<Mensaje>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Mensaje_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.ChatIdChat).HasColumnName("Chat_idChat");
            entity.Property(e => e.Contenido)
                .IsRequired()
                .HasColumnName("contenido");
            entity.Property(e => e.FechaHora).HasColumnName("fechaHora");
            entity.Property(e => e.PerfilIdPerfil).HasColumnName("Perfil_idPerfil");

            entity.HasOne(d => d.ChatIdChatNavigation).WithMany(p => p.Mensaje)
                .HasForeignKey(d => d.ChatIdChat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Chat_idChat");

            entity.HasOne(d => d.PerfilIdPerfilNavigation).WithMany(p => p.Mensaje)
                .HasForeignKey(d => d.PerfilIdPerfil)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Perfil_idPerfil");
        });

        modelBuilder.Entity<Notificacion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Notificacion_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 199999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.ChatIdChat).HasColumnName("Chat_idChat");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasColumnName("descripcion");
            entity.Property(e => e.NovedadIdNovedad).HasColumnName("Novedad_idNovedad");
            entity.Property(e => e.PerfilIdPerfil).HasColumnName("Perfil_idPerfil");
            entity.Property(e => e.Titulo)
                .IsRequired()
                .HasColumnName("titulo");

            entity.HasOne(d => d.ChatIdChatNavigation).WithMany(p => p.Notificacion)
                .HasForeignKey(d => d.ChatIdChat)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Chat_idChat");

            entity.HasOne(d => d.NovedadIdNovedadNavigation).WithMany(p => p.Notificacion)
                .HasForeignKey(d => d.NovedadIdNovedad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Novedad_idNovedad");

            entity.HasOne(d => d.PerfilIdPerfilNavigation).WithMany(p => p.Notificacion)
                .HasForeignKey(d => d.PerfilIdPerfil)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Perfil_idPerfil");
        });

        modelBuilder.Entity<Novedad>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Novedad_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasColumnName("descripcion");
            entity.Property(e => e.Fecha).HasColumnName("fecha");
            entity.Property(e => e.Imagen)
                .IsRequired()
                .HasColumnName("imagen");
            entity.Property(e => e.PerfilIdPerfil).HasColumnName("Perfil_idPerfil");
            entity.Property(e => e.Titulo)
                .IsRequired()
                .HasColumnName("titulo");

            entity.HasOne(d => d.PerfilIdPerfilNavigation).WithMany(p => p.Novedad)
                .HasForeignKey(d => d.PerfilIdPerfil)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Perfil_idPerfil");
        });

        modelBuilder.Entity<Perfil>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Perfil_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Alias).HasColumnName("alias");
            entity.Property(e => e.Cbu).HasColumnName("cbu");
            entity.Property(e => e.CuitCuil).HasColumnName("cuitCuil");
            entity.Property(e => e.Descripcion).HasColumnName("descripcion");
            entity.Property(e => e.Imagen)
                .IsRequired()
                .HasColumnName("imagen");
            entity.Property(e => e.LocalidadIdLocalidad).HasColumnName("Localidad_idLocalidad");
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasColumnName("razonSocial");
            entity.Property(e => e.UsuarioIdUsuario).HasColumnName("Usuario_idUsuario");

            entity.HasOne(d => d.LocalidadIdLocalidadNavigation).WithMany(p => p.Perfil)
                .HasForeignKey(d => d.LocalidadIdLocalidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Localidad_idLocalidad");

            entity.HasOne(d => d.UsuarioIdUsuarioNavigation).WithMany(p => p.Perfil)
                .HasForeignKey(d => d.UsuarioIdUsuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Usuario_idUsuario");
        });

        modelBuilder.Entity<Provincia>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Provincia_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Publicacion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Publicacion_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 99999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasColumnName("descripcion");
            entity.Property(e => e.DonacionIdDonacion).HasColumnName("Donacion_idDonacion");
            entity.Property(e => e.FechaCreacion).HasColumnName("fechaCreacion");
            entity.Property(e => e.Imagen).HasColumnName("imagen");
            entity.Property(e => e.LocalidadIdLocalidad).HasColumnName("Localidad_idLocalidad");
            entity.Property(e => e.PerfilIdPerfil).HasColumnName("Perfil_idPerfil");
            entity.Property(e => e.PublicacionTipoIdPublicacionTipo).HasColumnName("PublicacionTipo_idPublicacionTipo");
            entity.Property(e => e.Titulo)
                .IsRequired()
                .HasColumnName("titulo");

            entity.HasOne(d => d.DonacionIdDonacionNavigation).WithMany(p => p.Publicacion)
                .HasForeignKey(d => d.DonacionIdDonacion)
                .HasConstraintName("Donacion_idDonacion");

            entity.HasOne(d => d.LocalidadIdLocalidadNavigation).WithMany(p => p.Publicacion)
                .HasForeignKey(d => d.LocalidadIdLocalidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Localidad_idLocalidad_fkey");

            entity.HasOne(d => d.PerfilIdPerfilNavigation).WithMany(p => p.Publicacion)
                .HasForeignKey(d => d.PerfilIdPerfil)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("Perfil_idPerfil");

            entity.HasOne(d => d.PublicacionTipoIdPublicacionTipoNavigation).WithMany(p => p.Publicacion)
                .HasForeignKey(d => d.PublicacionTipoIdPublicacionTipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PublicacionTipo_idPublicacionTipo");
        });

        modelBuilder.Entity<PublicacionTipo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PublicacionTipo_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Usuario_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasColumnName("email");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasColumnName("password");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}